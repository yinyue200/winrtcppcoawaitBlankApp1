// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::winrtcppcoawaitBlankApp1 {

struct IMainPage;
struct MainPage;

}

namespace winrt::impl {

template <> struct category<winrtcppcoawaitBlankApp1::IMainPage>{ using type = interface_category; };
template <> struct category<winrtcppcoawaitBlankApp1::MainPage>{ using type = class_category; };
template <> struct name<winrtcppcoawaitBlankApp1::IMainPage>{ static constexpr auto & value{ L"winrtcppcoawaitBlankApp1.IMainPage" }; };
template <> struct name<winrtcppcoawaitBlankApp1::MainPage>{ static constexpr auto & value{ L"winrtcppcoawaitBlankApp1.MainPage" }; };
template <> struct guid<winrtcppcoawaitBlankApp1::IMainPage>{ static constexpr GUID value{ 0x00402C29,0xF6D5,0x55EB,{ 0x9E,0x3A,0x7D,0x90,0x88,0x60,0x44,0x84 } }; };
template <> struct default_interface<winrtcppcoawaitBlankApp1::MainPage>{ using type = winrtcppcoawaitBlankApp1::IMainPage; };

template <typename D>
struct consume_winrtcppcoawaitBlankApp1_IMainPage
{
    int32_t MyProperty() const;
    void MyProperty(int32_t value) const;
};
template <> struct consume<winrtcppcoawaitBlankApp1::IMainPage> { template <typename D> using type = consume_winrtcppcoawaitBlankApp1_IMainPage<D>; };

template <> struct abi<winrtcppcoawaitBlankApp1::IMainPage>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MyProperty(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MyProperty(int32_t value) noexcept = 0;
};};

}
